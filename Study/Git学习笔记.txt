								git学习笔记

1 代码托管中心

​	局域网 gitlab
​	互联网 github

2 本地库和远程库交互的两种方式

​	1 直接在远程库用push,clone和pull进行操作
​	2 用fork复制远程库，在其中操作，然后pull然后merge回原 本远程库
​	第9集

3 本地库初始化

​	git init
​	此命令会产生一个隐藏的.git文件夹，是本地库相关的子目录和文件，不要删除也不要胡乱修改。

4 设置签名

​	用于区分不同开发人员的身份
​	此处的签名和远程库的用户名和密码没关系
​	项目级别/仓库级别：只在当前本地库范围内有效
​		git config user.name 用户名
​		git config user.email 邮箱地址
​		信息保存位置： ~/.git/config
​	系统用户：在当前系统中都有效包括本地库
​		git config --global user.name 用户名
​		git config --global user.email 邮箱地址
​	信息保存位置： ~/.gitconfig
​	优先级别：  1.就近原则-项目级别优先于系统用户级别，二者都有时采取项目级别   2.如果只有系统级别，就以系统级别为准   3.不允许二者都没有
​	
5 添加提交以及查看提交

​	git status
​		查看工作区和暂存区的状态
​	git add 文件名
​		将工作区的文件加入暂存区，此时git会追踪这个文件
​		一个文件只用add一次添加追踪就好，如果不add直接commit就名为没办法撤回对文件的修改
​	git rm --cache 文件名
​		将文件从暂存区移除
​	git commit 文件名
​		将文件从暂存区提交到本地库,提交完会自动进入文本编辑器要求你写提交信息
​	git commit -m "提交信息" 文件名
​		不用进入编辑器就可以提交的方法（一般用这种）
​	git log
​		查看历史记录
​		多屏显示： 空格向下翻页，b向上，q退出
​	git log --pretty=oneline
​		简洁显示，留下哈希值（索引）
​	git log --oneline
​		基于上一个命令更加简洁，哈希值的前7位
​	git reflog
​		在oneline基础上加入了HEAD@{移动到当前版本需要多少步}
​	git reset --hard 局部索引值
​		改变版本
​	git reset --hard HEAD^
​		只能后退，后退一个版本，^的个数代表后退的步数
​		HEAD是指针，指向当前所指的版本
​	git reset --hard HEAD~需要后退的步数
​		只能后退，后退规定步数的版本
​		用本地库HEAD指向的版本对暂存区和工作区内容进行重置
​	git reset
​		--hard 同时改变工作区文件和暂存区，本地库的指针位置
​		--soft 只改变本地库指针位置，暂存区和工作区内容不变
​		--mixed 如果不加参数默认mixed，改变本地库和暂存区的指针，工作区内容不便
​	如果工作区文件被删除，可以通过本地库用--hard参数找回，前提为已经提交到本地库
​	也就是说，reflog里面记录了我们的操作，可以用哈希值来复现操作

6 查看文件差异
	git diff 文件名
		显示当前工作区文件与暂存区文件的差异
	git diff
		显示当前工作区所有文件的差异
	git diff HEAD（或者哈希值）
		历史记录的差异

7 分支管理
	git branch
		查看分支  后面加-v参数可以查看最后的操作
	git branch 分支名
		创建分支
	git checkout 分支名
		切换分支
	git checkout -b 分支名
		创建一个新的分支并切换到此分支
	git branch -d 分支名
		删除分支
	合并分支
		1 先切换到目标分支
		2 git merge 分支名
			指定要被合并的分支（合并记录里面的Fast-forward是指没有冲突）
	冲突处理
		如果需要合并的分支都对待合并文件进行了修改，而且修改冲突时：
		1 进入待合并文件进行修改，因为在文件的冲突处，git会保留每个版本供选择
		2 git add 文件名
		3 git commit -m "说明"	注意这里不能加文件名

8 git的底层原理
	通过哈希算法来区分文件和验证文件的完整性
	git把数据看作是小型文件系统的一组快照，每次提交更新都会对当前的全部文件制作一个快照并保存快照的索引。如果没有修改，就不会保存文件是直接来一个指针指向之前的文件。每次提交会生成一个提交文件，里面会存储自己的哈希，父节点哈希，文件树，提交者等信息，形成一个提交链
	分支操作，其实分支可以看作是指针，切换分支的操作就是HEAD指针指向分支指针

9 远程库的操作
	git remote
		查看以连接的远程库
	git remote -v
		查看远程库的服务器地址和仓库名称
	git remote add 远程库连接名 远程库url
		在本地添加远程库
	git remote set-url 远程库连接名 git@ github.com:xxx/xxx.git
		给远程库连接改地址
	git remote rm 远程库连接名
		删除远程库连接
	git push 远程库连接名 分支名
		推送本地分支到远程库
	git pull 远程库连接名 分支名
		抓取并合并远程库到本地分支
	git clone url
		完整的下载远程库
		创建origin远程库别名（clone -e 远程库连接名）
		初始化本地库
	邀请
		如果要让别人一起作这个项目，要在github中分支的setting里面邀请对方
	git fetch 远程库连接名
		只抓取不合并
	git checkout 远程库连接名/分支名
		切换到刚才抓取的库的指定分支（然后查看文件，确认无误再merge）
	远程库的冲突解决
		如果不是基于远程库最新版本所作的修改，则无法推送，需要先拉取
		拉取下来之后的操作和分支冲突解决的方法一样
	



​		
​	
